@{
    ViewData["Title"] = "Inicio";
}

<section title="main" class="row m-0">
    <div class="col-2" style="background-color:#d3d3d3"></div>
    <div class="col mx-4">
        <h1 class="display-4 text-center">Bienvenido/a, soy un <a href="https://github.com/CamiloTerevinto/TerevintoSoftware.StaticSiteGenerator">sitio .NET estático</a>!</h1>
        <hr />

        <div class="my-4">
            <h4>1. Introducción</h4>
            <p>
                La idea de esta aplicación web es demostrar las capacidades de la herramienta.
            </p>
            <p>
                La herramienta tiene el objetivo de permitir a programadores que usan <a href="https://asp.net">ASP.NET Core</a> generar sitios web estáticos (sin servidor),
                pero a la vez permitiéndoles reutilizar conceptos con los que ya son familiares: Partial Views, Tag Helpers, Layouts, etc.
            </p>
            <p>
                Esto deberia facilitar el uso de hosteos gratuitos o extremadamente baratos para estos programadores, sin que tengan que aprender frameworks de JavaScript,
                y sin que tengan que manejar archivos HTML individuales, que provoca mucha duplicación de código.
            </p>
            <p>
                <div class="alert alert-success">
                    La herramienta SSG (Static Site Generator) es gratis, Open-Source Software, y la puedes utilizar para cualquier uso comercial o personal,
                    bajo las conidiciones de la <a href="https://github.com/CamiloTerevinto/TerevintoSoftware.StaticSiteGenerator/blob/main/LICENSE">licencia MIT</a>.
                </div>
            </p>
        </div>

        <div class="my-4">
            <h4>2. Como usar la herramienta SSG</h4>
            <p>
                Utilizar ésta herramienta debería ser sencillo para escenarios comunes:

                <ol>
                    <li>
                        Primero, escribes tu sitio web usando ASP.NET Core MVC (Razor Pages no es soportado actualmente).
                    </li>
                    <li>
                        Luego, instalas la herramienta usando NuGet: <div>dotnet tool install TerevintoSoftware.StaticSiteGenerator.Tool</div>
                    </li>
                    <li>
                        La herramienta puede ser ejecutada desde la línea de comandos a través del comando ssg (probado en Windows y Linux), el cual te dará ayuda en pantalla sobre los parámetros aceptados.
                    </li>
                    <li>
                        Finalmente, solo tienes que copiar el resultado de la ejecución a tu proveedor de hosteo (en el caso de este sitio, Azure Storage Static Websites).
                    </li>
                </ol>
            </p>
        </div>

        <div class="my-4">
            <h4>3. Casos de uso / opciones de hosteo</h4>
            <p>
                La herramienta SSG puede ser usada en una cantidad de escenarios distintos, pero su propósito principal es facilitar el hosteo de sitios 
                de forma gratuita o extremadamente barata.
            </p>

            <div class="px-4 my-3">
                <h5>1. Para sitios web estáticos</h5>
                <p>
                    Para aplicaciones pequeñas, como blogs estáticos, sitios de CV, sitios de información de una compañía, etc.
                    El resultado de la herramienta puede ser subido a opciones de hosteo gratuitas o prácticamente gratuitas, 
                    como Azure Static Websites,Azure Blob Storage, AWS S3, Google Firebase, Netlify, etc.
                </p>
            </div>

            <div class="px-4 my-3">
                <h5>2. Para sitios web estáticos con algunas funcionalidades dinámicas</h5>
                <p>
                    Para esta clase de sitios, por ejemplo un sitio estatico con un formulario de contacto, mi recomendación sería 
                    separar las partes de cliente y servidor, dejar la parte del cliente en un hosteo como los mencionados en el paso anterior, y 
                    usar una opción que sea barata (serverless) para la parte del servidor. Por ejemplo:
                </p>

                <img src="~/Architecture options.jpg" alt="Una imagen que muestra diferentes opciones de hosteo usando AWS, Azure y Firebase." class="mb-4" />


                <div class="alert alert-warning">
                    <strong>Nota:</strong> No estamos afiliados con ninguno de los proveedores anteriores, ni recomendamos ninguna opción en particular.
                    Los ejemplos dados son solo ejemplos basados en la información pública que se encuentra a la fecha de Junio 2022.
                </div>
            </div>

            <div class="px-4 my-3">
                <h5>3. Para sitios web dinámicos</h5>
                <p>
                    Para sitios web que tengan mucha funcionalidad dinámica, como aplicaciones web (tiendas, blogs con secciones de comentarios, etc), 
                    ésta herramienta se puede usar de 2 formas:
                </p>
                <p>
                    Por un lado, puedes empezar con un sitio web estático usando la herramienta, mientras desarrollas las partes dinámicas del sitio,
                    para evitar los costos durante el desarrollo. ¡Ésto te permitiría seguir usando ASP.NET Core MVC sin hacer nada especial!
                </p>
                <p>
                    Por otro lado, puedes separar la parte del cliente y la del servidor, y usar tecnologías del lado del cliente (como JavaScript y jQuery)
                    para las partes dinámicas, como hacer las llamadas HTTP. Esto te permitiría quitar carga al servidor ya que el 
                    cliente puede ser hosteado de forma estática.
                </p>
            </div>

            <p>
                Dependiendo de tus necesidades actuales y las que puedas tener en el futuro, sin embargo, puede ser que te convenga mirar a otros frameworks.
                Si quieres seguir usando C#, por ejemplo, puedes ver si <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor">Blazor</a> tiene lo que necesitas.
            </p>
        </div>

        <div class="mt-4">
            <h4>4. Mejorando la herramienta ssg</h4>
            <p>
                Ésta herramienta actualmente es soportada por un solo programador (¡<a href="https://www.camiloterevinto.com/">hola</a>!), 
                por lo que resulta lógico que hayan defectos, cosas que se puedan mejorar, y funcionalidad que se pueda añadir.
            </p>
            <p>
                Por ejemplo, generar las URLs correctamente 
                <a href="https://github.com/CamiloTerevinto/TerevintoSoftware.StaticSiteGenerator/blob/main/TerevintoSoftware.StaticSiteGenerator/Services/UrlFormatter.cs">
                    tiene sus complicaciones
                </a>. Si quieres ayudar, puedes, por ejemplo:
                <ol class="list-group list-group-flush list-group-numbered" style="width: fit-content">
                    <li class="list-group-item">Ayudar con la documentación (de código y funcionalidades).</li>
                    <li class="list-group-item">Agregar tests.</li>
                    <li class="list-group-item">Mejorar éste sitio (<a href="https://github.com/CamiloTerevinto/TerevintoSoftware.StaticSiteGenerator.Demo">me encuentro en GitHub</a>).</li>
                    <li class="list-group-item">Sugerir arreglos/mejoras.</li>
                </ol>
            </p>

            <h5>4.1. Limitaciones conocidas</h5>
            <p>
                Actualmente, esta herramienta no soporta: Modelos, Areas, ciertas funcionalidades de localización, y probablemente otras funcionalidades que ASP.NET Core MVC provee.
                Tampoco soporta Razor Pages, aunque debería ser posible agregar soporte si recibo ayuda.
            </p>
        </div>
    </div>
    <div class="col-2" style="background-color:#d3d3d3"></div>
</section>